<?php

/**
 * @file
 * A module that acts as a central point for the redirections on the site.
 */

function redirector_entity_info() {
  $return = array(
    'redirector_rule' => array(
      'label' => t('Redirector'),
      'controller class' => 'RedirectorEntityController',
      'base table' => 'redirector_rules',
      'entity keys' => array(
        'id' => 'rid',
        'label' => 'title',
      ),
    ),
  );
  return $return;
}

/**
 * Implements hook_menu().
 */
function redirector_menu() {
  $items['admin/config/system/redirector'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Redirector',
    // Maybe we should create another permission.
    'access arguments' => array('administer site'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redirector_admin_components_form'),
    'file' => 'redirector.admin.inc',
  );
  $items['admin/config/system/redirector/components'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Components',
  );
  $items['admin/config/system/redirector/rules'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Rules',
    'page callback' => 'redirector_admin_rules_page',
    'access arguments' => array('administer site'),
    'file' => 'redirector.admin.inc',
  );
  return $items;
}

/**
 * Loads a single redirector rule by its id.
 *
 * @param int $rid
 *  The rule id.
 */
function redirector_rule_load($rid) {
  return entity_load_single('redirector_rule', $rid);
}

/**
 * Returns an array with all the available components.
 */
function redirector_get_all_components() {
  // @todo: maybe cache this if used intensively. And if cached, the cache key
  // must contain the langauge, because we use t() in the title of the
  // components.
  $components = &drupal_static(__FUNCTION__);
  if (is_null($components)) {
    $components = module_invoke_all('redirector_components');
    // @todo: invoke an alter if needed.
  }
  return $components;
}

/**
 * Returns an array with the active components.
 */
function redirector_get_active_components() {
  return variable_get('redirector_components', array());
}

/**
 * Creates a component object based on a component id.
 *
 * @param string $component_id
 *  The id of the component.
 *
 * @return RedirectorComponentLanguage
 *  The returned result is actually any class based on the
 *  RedirectorComponentInterface.
 */
function redirector_get_component($component_id) {
  $all_components = redirector_get_all_components();
  $component = FALSE;
  if (class_exists($all_components[$component_id]['class'])) {
    $component = new $all_components[$component_id]['class']();
  }
  return $component;
}

/**
 * Implements hook_redirector_components().
 *
 * @todo: document this hook.
 */
function redirector_redirector_components() {
  return array(
    'language' => array(
      'class' => 'RedirectorComponentLanguage',
    ),
    'country' => array(
      'class' => 'RedirectorComponentCountry',
    ),
  );
}
