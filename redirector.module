<?php

/**
 * @file
 * A module that acts as a central point for the redirections on the site.
 */

function redirector_entity_info() {
  $return = array(
    'redirector_rule' => array(
      'label' => t('Redirector Rule'),
      'controller class' => 'RedirectorRuleEntityController',
      'base table' => 'redirector_rules',
      'entity keys' => array(
        'id' => 'rid',
        'label' => 'title',
      ),
    ),
  );
  return $return;
}

/**
 * Implements hook_theme().
 */
function redirector_theme() {
  return array(
    'redirector_current_rules_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_init().
 */
function redirector_init() {
  // @todo: this should be improved as much as possible!
  $rules = redirector_rule_load_multiple();
  $active_components = redirector_get_active_components();
  $rule_controller = entity_get_controller('redirector_rule');
  foreach ($rules as &$rule) {
    $rule->match_results = array('total_match' => TRUE);
    foreach ($active_components as $component_key => $component) {
      $component_match = $rule_controller->matchComponent($rule, $component);
      if ($component_match) {
        $rule->match_results['components'][$component_key] = TRUE;
      }
      else {
        $rule->match_results['components'][$component_key] = FALSE;
        $rule->match_results['total_match'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function redirector_menu() {
  $path = redirector_get_admin_path();
  $items[$path] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Redirector',
    // Maybe we should create another permission.
    'access arguments' => array('administer site'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redirector_admin_components_form'),
    'file' => 'redirector.admin.inc',
  );
  $items[$path. '/components'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Components',
  );
  $items[$path . '/rules'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Rules',
    'page callback' => 'redirector_admin_rules_page',
    'access arguments' => array('administer site'),
    'file' => 'redirector.admin.inc',
  );
  $items[$path . '/rules/edit/%redirector_rule'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Edit rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redirector_admin_add_edit_rule_form', 6),
    'access arguments' => array('administer site'),
    'file' => 'redirector.admin.inc',
  );
  $items[$path . '/rules/delete/%redirector_rule'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Delete rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redirector_admin_delete_rule_confirm', 6),
    'access arguments' => array('administer site'),
    'file' => 'redirector.admin.inc',
  );
  return $items;
}

/**
 * Loads a single redirector rule by its id.
 *
 * @param int $rid
 *  The rule id.
 */
function redirector_rule_load($rid) {
  return entity_load_single('redirector_rule', $rid);
}

/**
 * Loads all the rules.
 */
function redirector_rule_load_multiple($conditions = array()) {
  // For the moment we use the entity_load() but we may need a custom query in
  // the future. Maybe one where we directly sort the results.
  $rules = entity_load('redirector_rule', FALSE, $conditions);
  uasort($rules, '_redirector_sort_callback');
  return $rules;
}

/**
 * Sort callback for a set of redirector objects.
 */
function _redirector_sort_callback($a, $b) {
  return $a->weight < $b->weight ? -1 : 1;
}

/**
 * Sort callback for a set of components, where they are structured as arrays..
 */
function _redirector_sort_callback_array($a, $b) {
  $a += array('weight' => 0);
  $b += array('weight' => 0);
  return $a['weight'] < $b['weight'] ? -1 : 1;
}

/**
 * Helper function to return the link to edit a rule.
 *
 * @param int $rid
 *  The rule id.
 */
function redirector_edit_rule_link($rid) {
  return 'admin/config/system/redirector/rules/edit/' . $rid;
}

/**
 * Helper function to return the link to edit a rule.
 *
 * @param int $rid
 *  The rule id.
 */
function redirector_delete_rule_link($rid) {
  return 'admin/config/system/redirector/rules/delete/' . $rid;
}

/**
 * Helper function to return the admin path.
 */
function redirector_get_admin_path() {
  return 'admin/config/system/redirector';
}

/**
 * Returns an array with all the available components.
 */
function redirector_get_all_components() {
  // @todo: maybe cache this if used intensively. And if cached, the cache key
  // must contain the langauge, because we use t() in the title of the
  // components.
  $components = &drupal_static(__FUNCTION__);
  if (is_null($components)) {
    $components = module_invoke_all('redirector_components');
    uasort($components, '_redirector_sort_callback_array');
    // @todo: invoke an alter if needed.
  }
  return $components;
}

/**
 * Returns an array with the active components.
 *
 * @return array RedirectorComponent
 */
function redirector_get_active_components() {
  $components = variable_get('redirector_components', array());
  if (!empty($components)) {
    foreach ($components as $key => $name) {
      $components[$key] = redirector_get_component($key);
    }
    uasort($components, '_redirector_sort_callback');
  }
  return $components;
}

/**
 * Creates a component object based on a component id.
 *
 * @param string $component_id
 *  The id of the component.
 *
 * @return RedirectorComponent
 */
function redirector_get_component($component_id) {
  $all_components = redirector_get_all_components();
  $component = FALSE;
  if (class_exists($all_components[$component_id]['class'])) {
    $component = new $all_components[$component_id]['class']($all_components[$component_id]);
  }
  return $component;
}

/**
 * Implements hook_redirector_components().
 *
 * @todo: document this hook.
 */
function redirector_redirector_components() {
  return array(
    'language' => array(
      'class' => 'RedirectorComponentLanguage',
      'types' => array('must_match_restriction'),
    ),
    'country' => array(
      'class' => 'RedirectorComponentCountry',
      'weight' => 1,
    ),
  );
}
